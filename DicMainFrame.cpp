// Copyright (C) 2006-2008 NISHIMURA Tsuyoshi
// License: GPL v2 or (at your option) any later version
/** @file
 * 
 * メインのフレームクラス
 * 
 * $Date: 2008/02/09 16:42:22 $
 */
// -*- C++ -*- generated by wxGlade 0.4cvs on Sun Aug 21 17:40:35 2005

#include <stdio.h>
#include <stdlib.h>
#include <eb/eb.h>
#include <wx/utils.h>
#include <wx/msgdlg.h>
#include <wx/mimetype.h>
#include <wx/filedlg.h>
#include <wx/fileconf.h>
#include "DicMainFrame.h"
#include "DicShare.h"

// アイコン
#include "digdic.xpm"
#include "search_word.xpm"
#include "search_end_word.xpm"
#include "search_exact_word.xpm"
#include "search_keyword.xpm"
#include "search_cross.xpm"
#include "search_multi.xpm"
#include "book_menu.xpm"
#include "book_copyright.xpm"
#include "find.xpm"
#include "left.xpm"
#include "right.xpm"
#include "up.xpm"
#include "down.xpm"

enum
{
	ID_SEARCH_WORD,
	ID_SEARCH_END_WORD,
	ID_SEARCH_EXACT_WORD,
	ID_SEARCH_KEYWORD,
	ID_SEARCH_CROSS,
	ID_SEARCH_MULTI,
	ID_BOOK_MENU,
	ID_BOOK_COPYRIGHT,
	ID_OPTION,
	ID_IMPORT_SETTINGS,
	ID_EXPORT_SETTINGS,
	ID_SEARCH_BOOK,
	ID_SEARCH,
	ID_DICCHOICE,
	ID_KEYWORDCOMBO,
	ID_MULTITYPECHOICE,
	ID_MULTIKEYSGRID,
	ID_HITLIST,
	ID_HTMLWIN,
	ID_BACK,
	ID_FORWARD,
	ID_UP,
	ID_DOWN,
	ID_MULTIKEYSMENU
};

BEGIN_EVENT_TABLE(DicMainFrame, wxFrame)
	EVT_CHAR_HOOK(DicMainFrame::OnCharHook)
	EVT_MENU(wxID_EXIT, DicMainFrame::OnExit)
	EVT_MENU(wxID_ABOUT, DicMainFrame::OnAbout)
	EVT_TOOL_RANGE(ID_SEARCH_WORD, ID_BOOK_COPYRIGHT, DicMainFrame::OnSearchMethod)
	EVT_UPDATE_UI_RANGE(ID_SEARCH_WORD, ID_BOOK_COPYRIGHT, DicMainFrame::OnUpdateSearchMethod)
	EVT_TOOL(ID_OPTION, DicMainFrame::OnOption)
	EVT_TOOL(ID_IMPORT_SETTINGS, DicMainFrame::OnImportSettings)
	EVT_TOOL(ID_EXPORT_SETTINGS, DicMainFrame::OnExportSettings)
	EVT_TOOL(ID_SEARCH_BOOK, DicMainFrame::OnSearchBook)
	EVT_TOOL(ID_SEARCH, DicMainFrame::OnSearch)
	EVT_TOOL(ID_BACK, DicMainFrame::OnBack)
	EVT_TOOL(ID_FORWARD, DicMainFrame::OnForward)
	EVT_TOOL(ID_UP, DicMainFrame::OnUp)
	EVT_TOOL(ID_DOWN, DicMainFrame::OnDown)
	EVT_CHOICE(ID_DICCHOICE, DicMainFrame::OnDicChoice)
	EVT_COMBOBOX(ID_KEYWORDCOMBO, DicMainFrame::OnKeywordCombo)
	EVT_CHOICE(ID_MULTITYPECHOICE, DicMainFrame::OnMultiTypeChoice)
	EVT_PG_RIGHT_CLICK(ID_MULTIKEYSGRID, DicMainFrame::OnMultiKeysGridClicked)
	EVT_BUTTON(ID_MULTIKEYSGRID, DicMainFrame::OnMultiKeysGridButton)
//	EVT_PG_CHANGED(ID_MULTIKEYSGRID, DicMainFrame::OnMultiKeysGridChanged)
	EVT_MENU_RANGE(ID_MULTIKEYSMENU, ID_MULTIKEYSMENU + 9999, DicMainFrame::OnMultiKeysMenu)
	EVT_LIST_ITEM_SELECTED(ID_HITLIST, DicMainFrame::OnHitListItemSelected)
END_EVENT_TABLE()

/**
 * コンストラクタ
 */
DicMainFrame::DicMainFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE),
    m_searchMethod(SEARCH_WORD),
    m_multiKeysSashPos(100),
    m_settingDialog(NULL)
{
    // begin wxGlade: DicMainFrame::DicMainFrame
    m_splitter = new wxSplitterWindow(this, -1, wxDefaultPosition, wxDefaultSize, wxSP_NOBORDER);
    m_rightPane = new wxPanel(m_splitter, -1, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER);
    m_leftPane = new wxPanel(m_splitter, -1);
    m_multiKeysSplitter = new wxSplitterWindow(m_leftPane, -1, wxDefaultPosition, wxDefaultSize, wxSP_NOBORDER);
    m_leftPane4 = new wxPanel(m_multiKeysSplitter, -1);
    m_leftPane3 = new wxPanel(m_multiKeysSplitter, -1);
    m_leftSplitter = new wxSplitterWindow(m_leftPane, -1, wxDefaultPosition, wxDefaultSize, wxSP_NOBORDER);
    m_leftPane2 = new wxPanel(m_leftSplitter, -1);
    m_leftPane1 = new wxPanel(m_leftSplitter, -1);
    m_menubar = new wxMenuBar();
    SetMenuBar(m_menubar);
    wxMenu* wxglade_tmp_menu_1 = new wxMenu();
    wxglade_tmp_menu_1->Append(wxID_EXIT, _("E&xit\tCtrl+Q"), wxT(""), wxITEM_NORMAL);
    m_menubar->Append(wxglade_tmp_menu_1, _("&File"));
    wxMenu* wxglade_tmp_menu_2 = new wxMenu();
    wxglade_tmp_menu_2->Append(ID_SEARCH_WORD, _("Word"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_SEARCH_END_WORD, _("End-word"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_SEARCH_EXACT_WORD, _("Exact-word"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_SEARCH_KEYWORD, _("Keyword"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_SEARCH_CROSS, _("Cross"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_SEARCH_MULTI, _("Multi"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_BOOK_MENU, _("Menu"), wxT(""), wxITEM_RADIO);
    wxglade_tmp_menu_2->Append(ID_BOOK_COPYRIGHT, _("Copyright"), wxT(""), wxITEM_RADIO);
    m_menubar->Append(wxglade_tmp_menu_2, _("&Edit"));
    wxMenu* wxglade_tmp_menu_3 = new wxMenu();
    wxglade_tmp_menu_3->Append(ID_OPTION, _("&Option"), wxT(""), wxITEM_NORMAL);
    wxglade_tmp_menu_3->AppendSeparator();
    wxglade_tmp_menu_3->Append(ID_SEARCH_BOOK, _("Search book"), wxT(""), wxITEM_NORMAL);
    wxglade_tmp_menu_3->AppendSeparator();
    wxglade_tmp_menu_3->Append(ID_EXPORT_SETTINGS, _("Export settings"), wxT(""), wxITEM_NORMAL);
    wxglade_tmp_menu_3->Append(ID_IMPORT_SETTINGS, _("Import settings"), wxT(""), wxITEM_NORMAL);
    m_menubar->Append(wxglade_tmp_menu_3, _("&Tool"));
    wxMenu* wxglade_tmp_menu_4 = new wxMenu();
    wxglade_tmp_menu_4->Append(wxID_ABOUT, _("&About digdic"), wxT(""), wxITEM_NORMAL);
    m_menubar->Append(wxglade_tmp_menu_4, _("&Help"));
    m_statusbar = CreateStatusBar(1, wxST_SIZEGRIP);
    m_toolbar = new wxToolBar(this, -1, wxDefaultPosition, wxDefaultSize, wxTB_HORIZONTAL|wxTB_FLAT);
    SetToolBar(m_toolbar);
    m_toolbar->Realize();
    const wxString m_dicChoice_choices[] = {
        
    };
    m_dicChoice = new wxChoice(m_leftPane1, ID_DICCHOICE, wxDefaultPosition, wxDefaultSize, 0, m_dicChoice_choices, 0);
    const wxString m_keywordCombo_choices[] = {
        
    };
    m_keywordCombo = new wxComboBox(m_leftPane2, ID_KEYWORDCOMBO, wxT(""), wxDefaultPosition, wxDefaultSize, 0, m_keywordCombo_choices, wxCB_DROPDOWN);
    const wxString m_multiTypeChoice_choices[] = {
        
    };
    m_multiTypeChoice = new wxChoice(m_leftPane3, ID_MULTITYPECHOICE, wxDefaultPosition, wxDefaultSize, 0, m_multiTypeChoice_choices, 0);
    m_multiKeysGrid = new DicPropertyGrid(m_leftPane3, ID_MULTIKEYSGRID);
    m_hitList = new wxListCtrl(m_leftPane4, ID_HITLIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    m_htmlWin = new DicHtmlWindow(m_rightPane, ID_HTMLWIN);

    set_properties();
    do_layout();
    // end wxGlade

    Customize();
    
    // EB ライブラリを初期化。
    ::eb_initialize_library();
    
    DicShare::subbooks.LoadConfig();
    if (DicShare::subbooks.empty())
    {
    	// 「辞書ファイルが設定されていません。探します。」と表示。
    	::wxMessageBox(_("The dictionary file is not set. It looks for. "));
    	DicShare::subbooks.SearchBook();
    }

	UpdateSubbooks();

	LoadConfig();
}

/**
 * デストラクタ
 */
DicMainFrame::~DicMainFrame()
{
	SaveConfig();
	
    DicShare::Clean();
    
    delete m_settingDialog;
	
    // EB ライブラリの利用を終了。
	::eb_finalize_library();
}

/**
 * プロパティを設定
 */
void DicMainFrame::set_properties()
{
    // begin wxGlade: DicMainFrame::set_properties
    SetTitle(_("digdic"));
    int m_statusbar_widths[] = { -1 };
    m_statusbar->SetStatusWidths(1, m_statusbar_widths);
    const wxString m_statusbar_fields[] = {
        _("frame_1_statusbar")
    };
    for(int i = 0; i < m_statusbar->GetFieldsCount(); ++i) {
        m_statusbar->SetStatusText(m_statusbar_fields[i], i);
    }
    m_dicChoice->SetMinSize(wxSize(0, -1));
    m_keywordCombo->SetMinSize(wxSize(0, -1));
    // end wxGlade
    
    m_dicChoice->SetSelection(0);
    m_keywordCombo->SetSelection(-1);
    m_multiTypeChoice->SetSelection(0);
}

/**
 * レイアウトする
 */
void DicMainFrame::do_layout()
{
    // begin wxGlade: DicMainFrame::do_layout
    wxBoxSizer* m_mainSizer = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* m_rightSizer = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* m_leftSizer = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* m_leftSizer4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* m_leftSizer3 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* m_leftSizer2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* m_leftSizer1 = new wxBoxSizer(wxHORIZONTAL);
    m_leftSizer1->Add(m_dicChoice, 1, wxEXPAND, 0);
    m_leftPane1->SetAutoLayout(true);
    m_leftPane1->SetSizer(m_leftSizer1);
    m_leftSizer1->Fit(m_leftPane1);
    m_leftSizer1->SetSizeHints(m_leftPane1);
    m_leftSizer2->Add(m_keywordCombo, 1, wxEXPAND, 0);
    m_leftPane2->SetAutoLayout(true);
    m_leftPane2->SetSizer(m_leftSizer2);
    m_leftSizer2->Fit(m_leftPane2);
    m_leftSizer2->SetSizeHints(m_leftPane2);
    m_leftSplitter->SplitVertically(m_leftPane1, m_leftPane2);
    m_leftSizer->Add(m_leftSplitter, 0, wxEXPAND, 0);
    m_leftSizer3->Add(m_multiTypeChoice, 0, wxBOTTOM|wxEXPAND|wxADJUST_MINSIZE, 2);
    m_leftSizer3->Add(m_multiKeysGrid, 1, wxEXPAND, 0);
    m_leftPane3->SetAutoLayout(true);
    m_leftPane3->SetSizer(m_leftSizer3);
    m_leftSizer3->Fit(m_leftPane3);
    m_leftSizer3->SetSizeHints(m_leftPane3);
    m_leftSizer4->Add(m_hitList, 1, wxEXPAND, 0);
    m_leftPane4->SetAutoLayout(true);
    m_leftPane4->SetSizer(m_leftSizer4);
    m_leftSizer4->Fit(m_leftPane4);
    m_leftSizer4->SetSizeHints(m_leftPane4);
    m_multiKeysSplitter->SplitHorizontally(m_leftPane3, m_leftPane4);
    m_leftSizer->Add(m_multiKeysSplitter, 1, wxTOP|wxEXPAND, 2);
    m_leftPane->SetAutoLayout(true);
    m_leftPane->SetSizer(m_leftSizer);
    m_leftSizer->Fit(m_leftPane);
    m_leftSizer->SetSizeHints(m_leftPane);
    m_rightSizer->Add(m_htmlWin, 1, wxEXPAND, 0);
    m_rightPane->SetAutoLayout(true);
    m_rightPane->SetSizer(m_rightSizer);
    m_rightSizer->Fit(m_rightPane);
    m_rightSizer->SetSizeHints(m_rightPane);
    m_splitter->SplitVertically(m_leftPane, m_rightPane);
    m_mainSizer->Add(m_splitter, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(m_mainSizer);
    m_mainSizer->Fit(this);
    m_mainSizer->SetSizeHints(this);
    Layout();
    // end wxGlade
}

#ifdef __WXMSW__
/**
 * メッセージ翻訳
 */
bool DicMainFrame::MSWTranslateMessage(WXMSG* pMsg)
{
    if (pMsg->message == WM_KEYDOWN)
    {
        switch (pMsg->wParam)
        {
        case VK_RETURN:
			wxWindow* win = FindFocus();
			// キーワード入力フィールドでEnter押下時、検索を行う。
			if (win == m_keywordCombo)
			{
				Search();
				return true;
        	// 複合検索の入力フィールドでEnter押下時、検索を行う。
			}
			else if (win && win->GetParent() == m_multiKeysGrid) // 入力フィールドの親がグリッドのとき
			{
				Search();
				return true;
			}
        }
    }
    
    if (wxFrame::MSWTranslateMessage(pMsg))
    {
    	return true;
    }
    return false;
}
#endif

/**
 * キー入力フック
 */
void DicMainFrame::OnCharHook(wxKeyEvent& event)
{
	switch (event.GetKeyCode())
	{
	case WXK_F5:
	{
		Search();
		return;
		break;
	}
	case WXK_DOWN:
	{
		// Alt+↓で複合検索の値候補を開く。
		if (!event.AltDown())
		{
			event.Skip();
			return;
		}
		wxWindow *win = FindFocus();
		if (win == NULL)
		{
			event.Skip();
			return;
		}
		if (win->GetParent() == m_multiKeysGrid)
		{
			PopupMultiCandidates();
			return;
		}
		else
		{
			event.Skip();
			return;
		}
		break;
	}
	case WXK_TAB:
	{
		wxWindow *win = FindFocus();
		if (win == NULL)
		{
			 event.Skip();
			 return;
		}
		
		int id = win->GetId();
		
		// 複合検索の入力フィールドにフォーカスされている場合は、親のIDを見る。
		if (win->GetParent() == m_multiKeysGrid)
		{
			id = ID_MULTIKEYSGRID;
		}
		
		if (event.ShiftDown())
		{
			// SHIFT + TAB
			switch (id) {
			case ID_DICCHOICE:
				m_htmlWin->SetFocus();
				break;
			case ID_KEYWORDCOMBO:
				m_dicChoice->SetFocus();
				break;
			case ID_MULTITYPECHOICE:
				m_dicChoice->SetFocus();
				break;
			case ID_MULTIKEYSGRID:
				if (m_multiKeysGrid->GetSelection() == m_multiKeysGrid->GetFirst())
				{
					m_multiTypeChoice->SetFocus();
				}
				else
				{
					event.Skip();
					return;
				}
				break;
			case ID_HITLIST:
				if (m_searchMethod == SEARCH_MULTI)
				{
					m_multiKeysGrid->SelectProperty(m_multiKeysGrid->GetLastProperty(), true);
				}
				else
				{
					m_keywordCombo->SetFocus();
				}
				break;
			case ID_HTMLWIN:
				m_hitList->SetFocus();
				break;
			default:
				event.Skip();
				break;
			}
		}
		else
		{
			// TAB
			switch (id)
			{
			case ID_DICCHOICE:
				if (m_searchMethod == SEARCH_MULTI)
				{
					m_multiTypeChoice->SetFocus();
				}
				else
				{
					m_keywordCombo->SetFocus();
				}
				break;
			case ID_KEYWORDCOMBO:
				m_hitList->SetFocus();
				break;
			case ID_MULTITYPECHOICE:
				m_multiKeysGrid->SelectProperty(m_multiKeysGrid->GetFirst(), true);
				break;
			case ID_MULTIKEYSGRID:
				if (m_multiKeysGrid->GetSelection() == m_multiKeysGrid->GetLastProperty())
				{
					m_hitList->SetFocus();
				}
				else
				{
					event.Skip();
					return;
				}
				break;
			case ID_HITLIST:
				m_htmlWin->SetFocus();
				break;
			case ID_HTMLWIN:
				m_dicChoice->SetFocus();
				break;
			default:
				event.Skip();
				break;
			}
		}
		return;
		break;
	}
	}
	
	event.Skip();
}

/**
 * 終了
 */
void DicMainFrame::OnExit(wxCommandEvent& event)
{
	Close(TRUE);
}

/**
 * About表示
 */
void DicMainFrame::OnAbout(wxCommandEvent&  event)
{
	wxString ver = _("digdic ver.");
	wxString copyright = _("Copyright (C) 2006-2008 NISHIMURA Tsuyoshi, All rights reserved.");
	::wxMessageBox(ver + wxT(__DATE__) + wxT("\n\n") + copyright,
		_("About digdic"), wxOK);
}

/**
 * 検索メソッド
 */
void DicMainFrame::OnSearchMethod(wxCommandEvent& event)
{
	// 検索メソッドを保存する。
	m_searchMethod = SEARCH_WORD;
	switch (event.GetId())
	{
	case ID_SEARCH_WORD:
		m_searchMethod = SEARCH_WORD;
		break;
	case ID_SEARCH_END_WORD:
		m_searchMethod = SEARCH_END_WORD;
		break;
	case ID_SEARCH_EXACT_WORD:
		m_searchMethod = SEARCH_EXACT_WORD;
		break;
	case ID_SEARCH_KEYWORD:
		m_searchMethod = SEARCH_KEYWORD;
		break;
	case ID_SEARCH_CROSS:
		m_searchMethod = SEARCH_CROSS;
		break;
	case ID_SEARCH_MULTI:
		if (m_searchMethod != SEARCH_MULTI)
		{
			m_searchMethod = SEARCH_MULTI;
			ShowMultiSearchList();
		}
		break;
	case ID_BOOK_MENU:
		m_searchMethod = BOOK_MENU;
		Search();
		break;
	case ID_BOOK_COPYRIGHT:
		m_searchMethod = BOOK_COPYRIGHT;
		Search();
		break;
	default:
		break;
	}
}

/**
 * 検索メソッド更新
 */
void DicMainFrame::OnUpdateSearchMethod(wxUpdateUIEvent& event)
{
	switch (m_searchMethod)
	{
	case SEARCH_WORD:
		m_menubar->Check(ID_SEARCH_WORD, true);
		m_toolbar->ToggleTool(ID_SEARCH_WORD, true);
		m_keywordCombo->Enable(true);
		break;
	case SEARCH_END_WORD:
		m_menubar->Check(ID_SEARCH_END_WORD, true);
		m_toolbar->ToggleTool(ID_SEARCH_END_WORD, true);
		m_keywordCombo->Enable(true);
		break;
	case SEARCH_EXACT_WORD:
		m_menubar->Check(ID_SEARCH_EXACT_WORD, true);
		m_toolbar->ToggleTool(ID_SEARCH_EXACT_WORD, true);
		m_keywordCombo->Enable(true);
		break;
	case SEARCH_KEYWORD:
		m_menubar->Check(ID_SEARCH_KEYWORD, true);
		m_toolbar->ToggleTool(ID_SEARCH_KEYWORD, true);
		m_keywordCombo->Enable(true);
		break;
	case SEARCH_CROSS:
		m_menubar->Check(ID_SEARCH_CROSS, true);
		m_toolbar->ToggleTool(ID_SEARCH_CROSS, true);
		m_keywordCombo->Enable(true);
		break;
	case SEARCH_MULTI:
		m_menubar->Check(ID_SEARCH_MULTI, true);
		m_toolbar->ToggleTool(ID_SEARCH_MULTI, true);
		m_keywordCombo->Enable(false);
		break;
	case BOOK_MENU:
		m_menubar->Check(ID_BOOK_MENU, true);
		m_toolbar->ToggleTool(ID_BOOK_MENU, true);
		m_keywordCombo->Enable(false);
		break;
	case BOOK_COPYRIGHT:
		m_menubar->Check(ID_BOOK_COPYRIGHT, true);
		m_toolbar->ToggleTool(ID_BOOK_COPYRIGHT, true);
		m_keywordCombo->Enable(false);
		break;
	default:
		break;
	}

	// マルチ検索入力フィールドを開くもしくは閉じる。
	if (m_searchMethod == SEARCH_MULTI)
	{
		if (!m_multiKeysSplitter->IsSplit())
		{
			m_multiKeysSplitter->SplitHorizontally(m_leftPane3, m_leftPane4, m_multiKeysSashPos);
		}
	}
	else
	{
		if (m_multiKeysSplitter->IsSplit())
		{
			m_multiKeysSashPos = m_multiKeysSplitter->GetSashPosition();
			m_multiKeysSplitter->Unsplit(m_leftPane3);
		}
	}
}

/**
 * Option
 */
void DicMainFrame::OnOption(wxCommandEvent& event)
{
/*	// 設定ファイルを開く
	wxFileType* ft = wxTheMimeTypesManager->GetFileTypeFromExtension(wxT("ini"));
	::wxExecute(ft->GetOpenCommand(DicShare::iniFile));
	delete ft;
*/
	// 設定を保存する。
	SaveConfig();
	
	if (!m_settingDialog)
	{
		m_settingDialog = new DicSettingDialog(this, 0, _("Settings"));
	}
	m_settingDialog->LoadConfig();
	if (m_settingDialog->ShowModal() == wxID_OK)
	{
		// 設定を読み込む。
		LoadConfig();
		
		// 辞書の設定を読み込む。
	    DicShare::subbooks.LoadConfig();
	    UpdateSubbooks();
	}
}

/**
 * 設定をインポート
 */
void DicMainFrame::OnImportSettings(wxCommandEvent& event)
{
	wxString filename = ::wxFileSelector(
		_("Choose a file to impoort"),
		wxT(""),
		wxT(""),
		wxT("*.ini"),
		_("Ini files (*.ini)|*.ini|All files (*.*)|*.*"),
		wxFD_OPEN | wxFD_FILE_MUST_EXIST);
	if (filename.empty())
	{
		return;
	}
	
	if (::wxMessageBox(_("The present settings will be deleted. Do you import the settings really?"),
			_("digdic"), wxICON_QUESTION | wxYES_NO | wxNO_DEFAULT) == wxNO)
	{
		return;
	}
	
	wxFileConfig config(
		wxEmptyString,
		wxEmptyString,
		filename,
		wxEmptyString,
		wxCONFIG_USE_LOCAL_FILE,
		*wxConvCurrent);
	
	DicShare::LoadConfig(&config);
	LoadConfig(&config);
    DicShare::subbooks.LoadConfig(&config);

    UpdateSubbooks();

	DicShare::SaveConfig();
	SaveConfig();
	DicShare::subbooks.SaveConfig();
}

/**
 * 設定をエクスポート
 */
void DicMainFrame::OnExportSettings(wxCommandEvent& event)
{
	wxString filename = ::wxFileSelector(
		_("Choose a file to export"),
		wxT(""),
		wxT(""),
		wxT("*.ini"),
		_("Ini files (*.ini)|*.ini|All files (*.*)|*.*"),
		wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
	if (filename.empty())
	{
		return;
	}
	
	wxFileConfig config(
		wxEmptyString,
		wxEmptyString,
		filename,
		wxEmptyString,
		wxCONFIG_USE_LOCAL_FILE,
		*wxConvCurrent);
	
	DicShare::SaveConfig(&config);
	SaveConfig(&config);
	DicShare::subbooks.SaveConfig(&config);
}

/**
 * Search book
 */
void DicMainFrame::OnSearchBook(wxCommandEvent& event)
{
	if (DicShare::subbooks.SearchBook())
	{
		UpdateSubbooks();
	}
}

/**
 * 辞書を選択
 */
void DicMainFrame::OnDicChoice(wxCommandEvent& event)
{
	DicSubbook* subbook = GetCurSubbook();
	if (subbook)
	{
		DicShare::subbooks.EnableAll(false);
		subbook->Enable();
	}
	else
	{
		DicShare::subbooks.EnableAll();
	}
	
	switch (m_searchMethod)
	{
	case SEARCH_MULTI:
		ShowMultiSearchList();
		break;
	default:
		// 検索する。
		Search();
		break;
	}
}

/**
 * 検索コマンド
 */
void DicMainFrame::OnSearch(wxCommandEvent& event)
{
	Search();
}

/**
 * 検索
 */
void DicMainFrame::Search()
{
	wxBusyCursor wait;
	
	DicReferences hits;
	int count = 0;
			
	switch (m_searchMethod)
	{
		case BOOK_MENU:
		{
			DicSubbook* subbook = GetCurSubbook();
			if (!subbook)
			{
				return;
			}
			DicReference* ref = subbook->GetMenu();
			if (!ref)
			{
				::wxMessageBox(_("Menu not found."));
				return;
			}
			DicShare::history.SetCurrent(ref);

			m_htmlWin->Freeze();
			m_htmlWin->SetPage(ref->GetText());
			m_htmlWin->Thaw();
			
			return;
	    	break;
		}
	    case BOOK_COPYRIGHT:
		{
			DicSubbook* subbook = GetCurSubbook();
			if (!subbook)
			{
				return;
			}
			DicReference* ref = subbook->GetCopyright();
			if (!ref)
			{
				::wxMessageBox(_("Copyright not found."));
				return;
			}
			DicShare::history.SetCurrent(ref);

			m_htmlWin->Freeze();
			m_htmlWin->SetPage(ref->GetText());
			m_htmlWin->Thaw();
			
			return;
	    	break;
		}
		case SEARCH_MULTI:
		{
			if (!m_multiKeysGrid->GetChildrenCount())
			{
				return;
			}
			
			m_multiKeysGrid->CommitChanges(); // 変更値を反映させる
			
			EB_Multi_Search_Code multiId = (EB_Multi_Search_Code)(intptr_t)m_multiTypeChoice->GetClientData(m_multiTypeChoice->GetSelection());
			wxArrayString keys;
			wxPGId id = m_multiKeysGrid->GetFirst();
			while (id.IsOk())
			{
				keys.Add(m_multiKeysGrid->GetPropertyValueAsString(id));
				id = m_multiKeysGrid->GetNextSiblingProperty(id);
			}
			DicSubbook* subbook = GetCurSubbook();
			if (!subbook)
			{
				return;
			}
			count = subbook->SearchMulti(multiId, keys, hits);
			if (!count)
			{
				wxString key;
				for (unsigned int i = 0; i < keys.GetCount(); ++i)
				{
					key += keys[i];
					key += wxT("\n");
				}
				::wxMessageBox(wxT("'") + key + wxT("'") + _(" not found."),
					_("digdic"), wxICON_INFORMATION);
				return;
			}
			break;
		}
		default:
		{
			wxString key = m_keywordCombo->GetValue();
			
			if (!key.length())
			{
				return;
			}
			
			if (m_keywordCombo->FindString(key) == wxNOT_FOUND)
			{
				m_keywordCombo->Insert(key, 0);
			}
			
		    for (unsigned int i = 0; i < DicShare::subbooks.GetCount(); ++i)
		    {
		    	if (DicShare::subbooks[i]->IsEnabled())
		    	{
			    	DicSubbook* subbook = DicShare::subbooks[i];
					switch (m_searchMethod)
					{
					case SEARCH_WORD:
				    	count += subbook->SearchWord(key, hits);
				    	break;
					case SEARCH_END_WORD:
				    	count += subbook->SearchEndWord(key, hits);
				    	break;
					case SEARCH_EXACT_WORD:
				    	count += subbook->SearchExactWord(key, hits);
				    	break;
					case SEARCH_KEYWORD:
				    	count += subbook->SearchKeyword(key, hits);
				    	break;
					case SEARCH_CROSS:
				    	count += subbook->SearchCross(key, hits);
				    	break;
					default:
						break;
					}
		    	}
		    }
			if (!count)
			{
				::wxMessageBox(wxT("'") + key + wxT("'") + _(" not found."),
					_("digdic"), wxICON_INFORMATION);
				return;
			}
	    	break;
		}
	}		    	
    
    // Hit数を表示してみる
    wxString status = wxString::Format(wxT("Hit:%d"), count);
    m_statusbar->SetStatusText(status, 0);

	DicShare::hits.DeleteAll();
	DicShare::hits.Append(hits);
		
	m_hitList->DeleteAllItems();
	for (int i = 0; i < count; ++i)
	{
		DicReference* hit = DicShare::hits[i];
		m_hitList->InsertItem(i, hit->GetSubbookTitle());
		m_hitList->SetItem(i, 1, hit->GetHeading());
		m_hitList->SetItemData(i, (long)hit);
	}
	
//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();
	
	DicReference* hit = DicShare::hits[0];
	
	DicShare::history.SetCurrent(new DicReference(*hit));

	m_htmlWin->Freeze();
	m_htmlWin->SetPage(hit->GetText());
	m_htmlWin->Thaw();
}

/**
 * 後退
 */
void DicMainFrame::OnBack(wxCommandEvent& event)
{
	wxBusyCursor wait;
	
	if (!DicShare::history.HasPrev())
	{
		return;
	}
	DicReference* ref = DicShare::history.Back();

//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();

	m_htmlWin->Freeze();
	m_htmlWin->SetPage(ref->GetText());
	m_htmlWin->Thaw();
}

/**
 * 前進
 */
void DicMainFrame::OnForward(wxCommandEvent& event)
{
	wxBusyCursor wait;
	
	if (!DicShare::history.HasNext())
	{
		return;
	}
	DicReference* ref = DicShare::history.Forward();

//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();
/*
	wxString html = wxT("<html><body>");
	html += ref->GetText();
	html += wxT("</body></html>");
*/
	m_htmlWin->Freeze();
	m_htmlWin->SetPage(ref->GetText());
	m_htmlWin->Thaw();
}

/**
 * UP
 */
void DicMainFrame::OnUp(wxCommandEvent& event)
{
	wxBusyCursor wait;
	
	if (!DicShare::history.GetCount()) {
		return;
	}
	DicReference* ref = DicShare::history.GetCurrent();
	
//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();
/*
	wxString html = wxT("<html><body>");
	html += ref->GetPrevText();
	html += wxT("</body></html>");
*/
	m_htmlWin->Freeze();
	m_htmlWin->SetPage(ref->GetPrevText());
	m_htmlWin->Thaw();
	
	// 一番下までスクロールさせる。
 	wxScrollWinEvent swe(wxEVT_SCROLLWIN_BOTTOM);
 	::wxPostEvent(m_htmlWin->GetEventHandler(), swe);
}

/**
 * DOWN
 */
void DicMainFrame::OnDown(wxCommandEvent& event)
{
	wxBusyCursor wait;
	
	if (!DicShare::history.GetCount())
	{
		return;
	}
	DicReference* ref = DicShare::history.GetCurrent();
	
//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();
/*
	wxString html = wxT("<html><body>");
	html += ref->GetNextText();
	html += wxT("</body></html>");
*/
	m_htmlWin->Freeze();
	m_htmlWin->SetPage(ref->GetNextText());
	m_htmlWin->Thaw();
}

/**
 * キーワード選択肢選択
 */
void DicMainFrame::OnKeywordCombo(wxCommandEvent& event)
{
	Search();
}

/**
 * 複合検索種別選択
 */
void DicMainFrame::OnMultiTypeChoice(wxCommandEvent& event)
{
	ShowMultiSearchEntry();
}

/**
 * 複合検索キー右クリック
 */
void DicMainFrame::OnMultiKeysGridClicked(wxPropertyGridEvent& event)
{
	PopupMultiCandidates();
}

/**
 * 複合検索キーボタン押下
 */
void DicMainFrame::OnMultiKeysGridButton(wxCommandEvent& event)
{
	PopupMultiCandidates();
}

/**
 * 複合検索キーメニュー選択
 */
void DicMainFrame::OnMultiKeysMenu(wxCommandEvent& event)
{
	DicMultiCandidate* candidate = m_multiCandidates[event.GetId() - ID_MULTIKEYSMENU];

	// 入力フィールドに表示する。
	wxTextCtrl* ctrl = (wxTextCtrl*)m_multiKeysGrid->GetEditorControl();
	ctrl->SetSelection(-1, -1);
	ctrl->WriteText(candidate->GetString());
	ctrl->SetSelection(-1, -1);
}

/**
 * リスト要素選択
 */
void DicMainFrame::OnHitListItemSelected(wxListEvent& event)
{
	wxBusyCursor wait;
	
	DicReference* hit = (DicReference*)event.GetItem().GetData();

//	DicShare::bitmaps.DeleteAll();
	DicShare::references.DeleteAll();
	
	DicShare::history.SetCurrent(new DicReference(*hit));
/*
	wxString html = wxT("<html><body>");
	html += hit->GetText();
	html += wxT("</body></html>");
*/
	m_htmlWin->Freeze();
	m_htmlWin->SetPage(hit->GetText());
	m_htmlWin->Thaw();
}

/**
 * カスタマイズ
 */
void DicMainFrame::Customize()
{
	// アイコンを設定する。
    wxIcon _icon;
    _icon.CopyFromBitmap(wxBitmap(digdic_xpm));
    SetIcon(_icon);
    
	// 検索ボタンを付ける。
    m_toolbar->AddRadioTool(ID_SEARCH_WORD, _("Search word"), wxBitmap(search_word_xpm));
    m_toolbar->AddRadioTool(ID_SEARCH_END_WORD, _("Search end word"), wxBitmap(search_end_word_xpm));
    m_toolbar->AddRadioTool(ID_SEARCH_EXACT_WORD, _("Search exact word"), wxBitmap(search_exact_word_xpm));
    m_toolbar->AddRadioTool(ID_SEARCH_KEYWORD, _("Search keyword"), wxBitmap(search_keyword_xpm));
    m_toolbar->AddRadioTool(ID_SEARCH_CROSS, _("Search cross"), wxBitmap(search_cross_xpm));
    m_toolbar->AddRadioTool(ID_SEARCH_MULTI, _("Search multi"), wxBitmap(search_multi_xpm));
    m_toolbar->AddRadioTool(ID_BOOK_MENU, _("Menu"), wxBitmap(book_menu_xpm));
    m_toolbar->AddRadioTool(ID_BOOK_COPYRIGHT, _("Copyright"), wxBitmap(book_copyright_xpm));
    m_toolbar->AddSeparator();
    m_toolbar->AddTool(ID_SEARCH, _("Search"), wxBitmap(find_xpm));
    m_toolbar->AddSeparator();
    m_toolbar->AddTool(ID_BACK, _("Back"), wxBitmap(left_xpm));
    m_toolbar->AddTool(ID_FORWARD, _("Forward"), wxBitmap(right_xpm));
    m_toolbar->AddSeparator();
    m_toolbar->AddTool(ID_UP, _("Up"), wxBitmap(up_xpm));
    m_toolbar->AddTool(ID_DOWN, _("Down"), wxBitmap(down_xpm));
    m_toolbar->Realize();
    
	// ステータスバーの設定
    m_statusbar->SetStatusText(wxT(""));
    
    // スプリッタの設定
    m_splitter->SetMinimumPaneSize(10);
    
    // 左上のスプリッタの設定
    m_leftSplitter->SetMinimumPaneSize(30);

	// 複合検索入力フィールドの設定
    m_multiKeysGrid->SetWindowStyleFlag(wxTAB_TRAVERSAL | wxSUNKEN_BORDER | wxPG_HIDE_MARGIN | wxPG_SPLITTER_AUTO_CENTER);
	m_multiKeysSplitter->Unsplit(m_leftPane3); // 非表示にする。

    // リストの設定
    m_hitList->InsertColumn(0, wxT(""));
    m_hitList->InsertColumn(1, wxT(""));
    
	// キーワードコンボにフォーカスする。
	m_keywordCombo->SetFocus();
}

/**
 * 設定を読み込む
 * 
 * @param config 設定
 */
void DicMainFrame::LoadConfig(wxConfigBase* config)
{
	if (!config)
	{
		config = wxConfigBase::Get();
	}

	// ウィンドウの位置・サイズを設定する。
	config->SetPath(wxT("/MainFrame"));
	if (config->Read(wxT("Maximize"), (long)0))
	{
		// Maximizeのイベントがあればそれを使ってfalseの場合のサイズを保存したほうが良い？？？
		if (!IsMaximized())
		{
			SetSize(config->Read(wxT("Width"), 800),
					config->Read(wxT("Height"), 500));
			Maximize(true);
		}
	}
	else
	{
		Maximize(false);
		SetSize(config->Read(wxT("Width"), 800),
				config->Read(wxT("Height"), 500));
	}
	
	// 検索メソッド
	config->SetPath(wxT("/Toolbar"));
	m_searchMethod = config->Read(wxT("SearchMethod"), ID_SEARCH_WORD);
	
    // スプリッタの設定
	config->SetPath(wxT("/Splitter"));
    m_splitter->SetSashPosition(config->Read(wxT("SashPosition"), 200));
    
    // 左上のスプリッタの設定
	config->SetPath(wxT("/LeftSplitter"));
    m_leftSplitter->SetSashPosition(config->Read(wxT("SashPosition"), 80));

	// 辞書チョイスの設定
	config->SetPath(wxT("/DicChoice"));
	int sel = m_dicChoice->FindString(config->Read(wxT("Selection"), wxT("")));
	if (sel == wxNOT_FOUND)
	{
		sel = 0;
	}
	m_dicChoice->SetSelection(sel);
	wxCommandEvent event; // ダミーのイベント
	OnDicChoice(event);

	// 複合検索キーのスプリッタの設定
	config->SetPath(wxT("/MultiKeysSplitter"));
	m_multiKeysSashPos = config->Read(wxT("SashPosition"), 100);
	
	// 複合検索種別チョイスの設定
	if (m_searchMethod == SEARCH_MULTI)
	{
		config->SetPath(wxT("/MultiTypeChoice"));
		int selection = config->Read(wxT("Selection"), (long)0);
		ShowMultiSearchList(selection);
	}

    // リストの設定
	config->SetPath(wxT("/HitList"));
    m_hitList->SetColumnWidth(0, config->Read(wxT("ColumnWidth0"), 50));
    m_hitList->SetColumnWidth(1, config->Read(wxT("ColumnWidth1"), 1000));
    
    // HTMLビューアの設定
    m_htmlWin->SetBorders(4);
    const int sizes[] = { 8, 10, 12, 14, 16, 18, 20 };
    m_htmlWin->SetFonts(wxT("FixedSys"), wxT("FixedSys"), sizes);
    m_htmlWin->ReadCustomization(config, wxT("/HtmlWin"));
}

/**
 * 設定を保存
 * 
 * @param config 設定
 */
void DicMainFrame::SaveConfig(wxConfigBase* config)
{
	if (!config)
	{
		config = wxConfigBase::Get();
	}

	config->SetPath(wxT("/MainFrame"));
	config->Write(wxT("Maximize"), IsMaximized());
	wxRect rect = GetRect();
//	config->Write(wxT("X"), rect.x);
//	config->Write(wxT("Y"), rect.y);
	config->Write(wxT("Width"), rect.width);
	config->Write(wxT("Height"), rect.height);

	config->SetPath(wxT("/Toolbar"));
	config->Write(wxT("SearchMethod"), m_searchMethod);

	config->SetPath(wxT("/Splitter"));
	config->Write(wxT("SashPosition"), m_splitter->GetSashPosition());
	
	config->SetPath(wxT("/LeftSplitter"));
	config->Write(wxT("SashPosition"), m_leftSplitter->GetSashPosition());
	
	config->SetPath(wxT("/DicChoice"));
	int sel = m_dicChoice->GetSelection();
	config->Write(wxT("Selection"), m_dicChoice->GetString(sel));
	
	if (m_multiKeysSplitter->IsSplit())
	{
		m_multiKeysSashPos = m_multiKeysSplitter->GetSashPosition();
	}
	config->SetPath(wxT("/MultiKeysSplitter"));
	config->Write(wxT("SashPosition"), m_multiKeysSashPos);
	
	config->SetPath(wxT("/MultiTypeChoice"));
	config->Write(wxT("Selection"), m_multiTypeChoice->GetSelection());

	config->SetPath(wxT("/HitList"));
	config->Write(wxT("ColumnWidth0"), m_hitList->GetColumnWidth(0));
	config->Write(wxT("ColumnWidth1"), m_hitList->GetColumnWidth(1));
	
	m_htmlWin->WriteCustomization(config, wxT("/HtmlWin"));
}

/**
 * 辞書リスト要素を更新
 */
void DicMainFrame::UpdateSubbooks()
{
	m_dicChoice->Clear();
	m_dicChoice->Append(_("All"), (void*)NULL);
	for (unsigned int i = 0; i < DicShare::subbooks.GetCount(); ++i)
	{
		DicSubbook* sb = DicShare::subbooks[i];
		m_dicChoice->Append(sb->GetAlias(), (void*)sb);
	}
	m_dicChoice->Select(0);
	DicShare::subbooks.EnableAll();
}

/**
 * 複合検索一覧を表示
 */
void DicMainFrame::ShowMultiSearchList(int selection)
{
	m_multiTypeChoice->Clear();
	m_multiKeysGrid->Clear();
	m_multiTypeChoice->Enable(false);
	m_multiKeysGrid->Enable(false);

	DicSubbook* subbook = GetCurSubbook();
	if (!subbook)
	{
		m_multiTypeChoice->Append(_("Multi search cannot be done."));
		m_multiTypeChoice->SetSelection(0);
		return;
	}
	if (!subbook->HasMultiSearch())
	{
		m_multiTypeChoice->Append(_("Multi search cannot be done."));
		m_multiTypeChoice->SetSelection(0);
		return;
	}

	m_multiTypeChoice->Enable(true);
	m_multiKeysGrid->Enable(true);
	
	int count = subbook->GetMultiCount();
	for (int i = 0; i < count; ++i)
	{
		EB_Multi_Search_Code code = subbook->GetMultiCode(i);
		m_multiTypeChoice->Append(subbook->GetMultiTitle(code), (void*)code);
	}
	m_multiTypeChoice->SetSelection(selection);
	
	ShowMultiSearchEntry();
}

/**
 * 複合検索の題目を表示
 */
void DicMainFrame::ShowMultiSearchEntry()
{
	m_multiKeysGrid->Clear();
		
	// 題目を追加する。
	EB_Multi_Search_Code code = (EB_Multi_Search_Code)(intptr_t)m_multiTypeChoice->GetClientData(m_multiTypeChoice->GetSelection());
	DicSubbook* subbook = GetCurSubbook();
	int entryCount = subbook->GetMultiEntryCount(code);
	for (int i = 0; i < entryCount; ++i)
	{
		if (subbook->HasMultiEntryCandidates(code, i))
		{
			// 値の候補あり
			wxPGId id = m_multiKeysGrid->Append(wxStringProperty(subbook->GetMultiEntryLabel(code, i)));
    		m_multiKeysGrid->SetPropertyEditor(id, wxPG_EDITOR(TextCtrlAndButton));
    		m_multiKeysGrid->SetPropertyClientData(id, (void*)i);
		}
		else
		{
			// 値の候補なし
			wxPGId id = m_multiKeysGrid->Append(wxStringProperty(subbook->GetMultiEntryLabel(code, i)));
    		m_multiKeysGrid->SetPropertyClientData(id, (void*)i);
		}
	}
	m_multiKeysGrid->Refresh();
	
//	m_multiKeysSplitter->SetSashPosition(m_multiKeysGrid->GetRowHeight() * m_multiKeysGrid->GetChildrenCount());
}

/**
 * 複合検索の値の候補を表示
 */
void DicMainFrame::PopupMultiCandidates()
{
	// エディタにフォーカスするため再選択する。
	m_multiKeysGrid->SelectProperty(m_multiKeysGrid->GetSelectedProperty(), true);
	
	DicSubbook* subbook = GetCurSubbook();
	EB_Multi_Search_Code code = (EB_Multi_Search_Code)(intptr_t)m_multiTypeChoice->GetClientData(m_multiTypeChoice->GetSelection());
	wxPGId id = m_multiKeysGrid->GetSelectedProperty();
	int index = (intptr_t)m_multiKeysGrid->GetPropertyClientData(id);
	if (!subbook->HasMultiEntryCandidates(code, index))
	{
		return;
	}
	EB_Position pos = subbook->GetMultiEntryCandidatesPos(code, index);
	
	wxMenu* menu = MultiCandudatesMenu(subbook, pos);
	
	wxWindow* win = FindFocus();
	wxRect rect = win->GetRect();
	m_multiKeysGrid->PopupMenu(menu, rect.GetX(), rect.GetBottom() + 2);
	delete menu; // サブメニューもちゃんとdeleteされる
	m_multiCandidates.DeleteAll();
}

/* サブメニューのデストラクタ呼び出し確認の為作成
class DicMenu : public wxMenu
{
	virtual ~DicMenu()
	{
		wxMessageBox(wxT("~DicMenu()"));
	};
};
*/

/**
 * 複合検索の値の候補メニュー
 */
wxMenu* DicMainFrame::MultiCandudatesMenu(DicSubbook* subbook, EB_Position pos)
{
	DicMultiCandidates candidates = subbook->GetMultiEntryCandidates(&pos);

	wxMenu* menu = new wxMenu;
	for (unsigned int i = 0; i < candidates.Count(); ++i)
	{
		if (i > 0 && i % 20 == 0)
		{
			menu->Break();
		}
		if (candidates[i]->HasGroup())
		{
			menu->Append(ID_MULTIKEYSMENU + m_multiCandidates.Count(),
				candidates[i]->GetString(),
				MultiCandudatesMenu(subbook, candidates[i]->GetGroupPos()));
		}
		else
		{
			menu->Append(ID_MULTIKEYSMENU + m_multiCandidates.Count(),
				candidates[i]->GetString());
		}
		m_multiCandidates.Add(candidates[i]);
	}
	return menu;
}

/**
 * 選択中の副本
 */
DicSubbook* DicMainFrame::GetCurSubbook()
{
	return (DicSubbook*)m_dicChoice->GetClientData(m_dicChoice->GetSelection());
}
