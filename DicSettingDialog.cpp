// Copyright (C) 2006-2007 NISHIMURA Tsuyoshi
// License: GPL v2 or (at your option) any later version
/** @file
 * 
 * 設定ダイアログクラス
 * 
 * $Date: 2007/10/31 16:11:54 $
 */
// -*- C++ -*- generated by wxGlade 0.4 on Tue Jun 20 20:17:06 2006

#include <wx/fontenum.h>
#include <wx/confbase.h>
#include "DicSettingDialog.h"
#include "DicShare.h"

enum
{
	// コントロール
	ID_GRID = 1,
	ID_DICLIST,
	ID_GROUPTREE,
	ID_ADDGROUPBUTTON,
	ID_SCLIST,
	ID_ADDSCBUTTON,
	// コンテキストメニュー
	ID_DICLIST_UP,
	ID_DICLIST_DOWN,
	ID_DICLIST_EDIT,
	ID_DICLIST_DELETE	
};

BEGIN_EVENT_TABLE(DicSettingDialog, wxDialog)
	EVT_CHAR_HOOK(DicSettingDialog::OnCharHook)
	EVT_BUTTON(wxID_OK, DicSettingDialog::OnOK)
	EVT_COMMAND_CONTEXT_MENU(ID_DICLIST, DicSettingDialog::OnCMenuDicList)
	EVT_COMMAND_CONTEXT_MENU(ID_GROUPTREE, DicSettingDialog::OnCMenuGroupTree)
	EVT_COMMAND_CONTEXT_MENU(ID_SCLIST, DicSettingDialog::OnCMenuSCList)
	EVT_MENU(ID_DICLIST_UP, DicSettingDialog::OnDicListUp)
	EVT_MENU(ID_DICLIST_DOWN, DicSettingDialog::OnDicListDown)
	EVT_MENU(ID_DICLIST_EDIT, DicSettingDialog::OnDicListEdit)
	EVT_MENU(ID_DICLIST_DELETE, DicSettingDialog::OnDicListDelete)
END_EVENT_TABLE()

/**
 * コンストラクタ
 */
DicSettingDialog::DicSettingDialog(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, style)
{
	// wxGladeが作成したグリッドを生成する処理は↓で置き換える。スタイル指定の為。
/*
    m_grid = new DicPropertyGrid(m_note_pane_1, ID_GRID,
        wxDefaultPosition, wxDefaultSize,
        wxSUNKEN_BORDER |
        wxTAB_TRAVERSAL);
*/
    // begin wxGlade: DicSettingDialog::DicSettingDialog
    m_note = new wxNotebook(this, -1, wxDefaultPosition, wxDefaultSize, 0);
    m_note_pane_4 = new wxPanel(m_note, -1);
    m_note_pane_3 = new wxPanel(m_note, -1);
    m_note_pane_2 = new wxPanel(m_note, -1);
    m_note_pane_1 = new wxPanel(m_note, -1);
//    m_grid = new DicPropertyGrid(m_note_pane_1, ID_GRID);
    m_grid = new DicPropertyGrid(m_note_pane_1, ID_GRID,
        wxDefaultPosition, wxDefaultSize,
        wxSUNKEN_BORDER |
        wxTAB_TRAVERSAL);
    m_dicList = new wxListCtrl(m_note_pane_2, ID_DICLIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    m_groupTree = new wxTreeCtrl(m_note_pane_3, ID_GROUPTREE, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
    m_scList = new wxListCtrl(m_note_pane_4, ID_SCLIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER);
    m_ok = new wxButton(this, wxID_OK, _("OK"));
    m_cancel = new wxButton(this, wxID_CANCEL, _("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade
    
    Customize();

    SetSize(
        (wxSystemSettings::GetMetric(wxSYS_SCREEN_X)/10)*4,
        (wxSystemSettings::GetMetric(wxSYS_SCREEN_Y)/10)*6
        );
    Centre();
    
    // ポップアップメニューを作成する。
    m_menuDicList.Append(ID_DICLIST_UP, _("Up\t[+]"));
    m_menuDicList.Append(ID_DICLIST_DOWN, _("Down\t[-]"));
//    m_menuDicList.Append(ID_DICLIST_EDIT, _("Edit"));
    m_menuDicList.Append(ID_DICLIST_DELETE, _("Delete\t[DEL]"));
}

/**
 * デストラクタ
 */
DicSettingDialog::~DicSettingDialog()
{
	// 編集用データを削除する。
	m_subbooks.DeleteAll();
}

/**
 * キー入力フック
 */
void DicSettingDialog::OnCharHook(wxKeyEvent& event)
{
	// 辞書ページ
	if (m_note->GetSelection() == 1)
	{
		switch (event.GetKeyCode()) {
		case '+':
		{
			wxCommandEvent dummy;
			OnDicListUp(dummy);
			return;
			break;
		}
		case '-':
		{
			wxCommandEvent dummy;
			OnDicListDown(dummy);
			return;
			break;
		}
		case WXK_DELETE:
			wxCommandEvent dummy;
			OnDicListDelete(dummy);
			return;
			break;
		}
	}
	
	event.Skip();
}

/**
 * OK
 */
void DicSettingDialog::OnOK(wxCommandEvent& event)
{
	SaveConfig();
	
	m_subbooks.SaveConfig();
	
	EndModal(wxID_OK);
//	wxDialog::OnOK(event);
}

/**
 * コンテキストメニュー 辞書リスト
 */
void DicSettingDialog::OnCMenuDicList(wxContextMenuEvent& event)
{
	PopupMenu(&m_menuDicList);
}

/**
 * コンテキストメニュー グループツリー
 */
void DicSettingDialog::OnCMenuGroupTree(wxContextMenuEvent& event)
{
}

/**
 * コンテキストメニュー ショートカットリスト
 */
void DicSettingDialog::OnCMenuSCList(wxContextMenuEvent& event)
{
}

/**
 * 辞書リスト 上へ
 */
void DicSettingDialog::OnDicListUp(wxCommandEvent& event)
{
	long sel = m_dicList->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
	if (sel <= 0) // 未選択(-1)もしくは最上(0)
	{
		return;
	}
	
	// 表示内容を更新。
	long upper = sel - 1;
	long data1 = m_dicList->GetItemData(sel);
	long data2 = m_dicList->GetItemData(upper);
	m_dicList->SetItemData(upper, data1);
	m_dicList->SetItemData(sel, data2);
	ShowDicListItem(upper);
	ShowDicListItem(sel);
	
	// 辞書リストの順も入れ替える。
	m_subbooks[sel] = (DicSubbook*)data2;
	m_subbooks[upper] = (DicSubbook*)data1;

	// 移動後の要素を選択する。
	m_dicList->SetItemState(sel, 0, wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED);
	m_dicList->SetItemState(upper,
		wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED,
		wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED);
}

/**
 * 辞書リスト 下へ
 */
void DicSettingDialog::OnDicListDown(wxCommandEvent& event)
{
	long sel = m_dicList->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
	if (sel < 0) // 未選択(-1)
	{
		return;
	}
	if (sel == m_dicList->GetItemCount() - 1) // 最下
	{
		return;
	}
	
	// 表示内容を更新。
	long lower = sel + 1;
	long data1 = m_dicList->GetItemData(sel);
	long data2 = m_dicList->GetItemData(lower);
	m_dicList->SetItemData(lower, data1);
	m_dicList->SetItemData(sel, data2);
	ShowDicListItem(lower);
	ShowDicListItem(sel);
	
	// 辞書リストの順も入れ替える。
	m_subbooks[sel] = (DicSubbook*)data2;
	m_subbooks[lower] = (DicSubbook*)data1;
	
	// 移動後の要素を選択する。
	m_dicList->SetItemState(sel, 0, wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED);
	m_dicList->SetItemState(lower,
		wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED,
		wxLIST_STATE_FOCUSED | wxLIST_STATE_SELECTED);
}

/**
 * 辞書リスト 編集
 */
void DicSettingDialog::OnDicListEdit(wxCommandEvent& event)
{
}

/**
 * 辞書リスト 削除
 */
void DicSettingDialog::OnDicListDelete(wxCommandEvent& event)
{
	long sel = m_dicList->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
	if (sel == -1) // 未選択(-1)
	{
		return;
	}
	
 	if (::wxMessageBox(_("Delete this dictionary?"),
 			_("digdic"), wxICON_QUESTION | wxYES_NO | wxNO_DEFAULT) != wxYES)
 	{
 		return;
 	}
	
	for (; sel != -1;
		sel = m_dicList->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED))
	{
		// 選択されている要素を消す。
		m_dicList->DeleteItem(sel);
		
		// 辞書配列の要素も消す。
		DicSubbook* sb = m_subbooks[sel];
		delete sb;
		m_subbooks.RemoveAt(sel);
	}
}

/**
 * プロパティを設定
 */
void DicSettingDialog::set_properties()
{
    // begin wxGlade: DicSettingDialog::set_properties
    SetTitle(_("Settings"));
    m_ok->SetMinSize(wxSize(100,24));
    m_cancel->SetMinSize(wxSize(100,24));
    m_cancel->SetDefault();
    // end wxGlade
}

/**
 * レイアウトする
 */
void DicSettingDialog::do_layout()
{
    // begin wxGlade: DicSettingDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    sizer_3->Add(m_grid, 1, wxALL|wxEXPAND, 4);
    m_note_pane_1->SetAutoLayout(true);
    m_note_pane_1->SetSizer(sizer_3);
    sizer_3->Fit(m_note_pane_1);
    sizer_3->SetSizeHints(m_note_pane_1);
    sizer_4->Add(m_dicList, 1, wxEXPAND, 0);
    m_note_pane_2->SetAutoLayout(true);
    m_note_pane_2->SetSizer(sizer_4);
    sizer_4->Fit(m_note_pane_2);
    sizer_4->SetSizeHints(m_note_pane_2);
    sizer_5->Add(m_groupTree, 1, wxEXPAND, 0);
    m_note_pane_3->SetAutoLayout(true);
    m_note_pane_3->SetSizer(sizer_5);
    sizer_5->Fit(m_note_pane_3);
    sizer_5->SetSizeHints(m_note_pane_3);
    sizer_6->Add(m_scList, 1, wxEXPAND, 0);
    m_note_pane_4->SetAutoLayout(true);
    m_note_pane_4->SetSizer(sizer_6);
    sizer_6->Fit(m_note_pane_4);
    sizer_6->SetSizeHints(m_note_pane_4);
    m_note->AddPage(m_note_pane_1, _("General"));
    m_note->AddPage(m_note_pane_2, _("Dictionary"));
    m_note->AddPage(m_note_pane_3, _("Group"));
    m_note->AddPage(m_note_pane_4, _("Shortcut"));
    sizer_1->Add(m_note, 1, wxEXPAND, 0);
    sizer_2->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
    sizer_2->Add(m_ok, 0, wxALL|wxEXPAND|wxADJUST_MINSIZE, 4);
    sizer_2->Add(m_cancel, 0, wxALL|wxEXPAND|wxADJUST_MINSIZE, 4);
    sizer_2->Add(20, 20, 1, wxADJUST_MINSIZE, 0);
    sizer_1->Add(sizer_2, 0, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    sizer_1->SetSizeHints(this);
    Layout();
    Centre();
    // end wxGlade
}

/**
 * カスタマイズ
 */
void DicSettingDialog::Customize()
{
	// 全般
	m_grid->AppendCategory(_("Common"), wxT("Common"));
	m_pageMaxResults = m_grid->Append(wxIntProperty(_("PageMaxResults"), wxT("PageMaxResults")));
	m_pageMaxBytes = m_grid->Append(wxIntProperty(_("PageMaxBytes"), wxT("PageMaxBytes")));
	m_searchMaxResults = m_grid->Append(wxIntProperty(_("SearchMaxResults"), wxT("SearchMaxResults")));
	
	m_grid->AppendCategory(_("MainFrame"), wxT("MainFrame"));
	m_mainFrameMaximize = m_grid->Append(wxBoolProperty(_("Maximize"), wxT("Maximize")));
//	m_mainFrameX = m_grid->Append(wxIntProperty(_("X"), wxT("X")));
//	m_mainFrameY = m_grid->Append(wxIntProperty(_("Y"), wxT("Y")));
	m_mainFrameWidth = m_grid->Append(wxIntProperty(_("Width"), wxT("Width")));
	m_mainFrameHeight = m_grid->Append(wxIntProperty(_("Height"), wxT("Height")));

	m_grid->AppendCategory(_("Toolbar"), wxT("SearchMethod"));
	m_toolbarSearchMethod = m_grid->Append(wxIntProperty(_("SearchMethod"), wxT("SearchMethod")));
	
	m_grid->AppendCategory(_("Splitter"), wxT("Splitter"));
	m_splitterSashPosition = m_grid->Append(wxIntProperty(_("SashPosition"), wxT("SashPosition")));

	m_grid->AppendCategory(_("LeftSplitter"), wxT("LeftSplitter"));
	m_leftSplitterSashPosition = m_grid->Append(wxIntProperty(_("SashPosition"), wxT("SashPosition")));
	
	m_grid->AppendCategory(_("DicChoice"), wxT("Selection"));
	m_dicChoiceSelection = m_grid->Append(wxStringProperty(_("Selection"), wxT("Selection")));
	
	m_grid->AppendCategory(_("MultiKeysSplitter"), wxT("MultiKeysSplitter"));
	m_multiKeysSplitterSashPosition = m_grid->Append(wxIntProperty(_("SashPosition"), wxT("SashPosition")));

	m_grid->AppendCategory(_("MultiTypeChoice"), wxT("MultiTypeChoice"));
	m_multiTypeChoiceSelection = m_grid->Append(wxIntProperty(_("Selection"), wxT("Selection")));

	m_grid->AppendCategory(_("HitList"), wxT("HitList"));
	m_hitListColumnWidth0 = m_grid->Append(wxIntProperty(_("ColumnWidth0"), wxT("ColumnWidth0")));
	m_hitListColumnWidth1 = m_grid->Append(wxIntProperty(_("ColumnWidth1"), wxT("ColumnWidth1")));

	m_grid->AppendCategory(_("HtmlWin"), wxT("HtmlWin"));
	wxFontEnumerator fontEnum;
	fontEnum.EnumerateFacenames();

 	wxArrayString fonts = fontEnum.GetFacenames();
	fonts.Sort();
	m_htmlWinFontFaceFixed = m_grid->Append(wxEnumProperty(_("FontFaceFixed"), wxT("FontFaceFixed"), fonts));
	m_htmlWinFontFaceNormal = m_grid->Append(wxEnumProperty(_("FontFaceNormal"), wxT("FontFaceNormal"), fonts));
	m_htmlWinFontsSize0 = m_grid->Append(wxIntProperty(_("FontsSize0"), wxT("FontsSize0")));
	m_htmlWinFontsSize1 = m_grid->Append(wxIntProperty(_("FontsSize1"), wxT("FontsSize1")));
	m_htmlWinFontsSize2 = m_grid->Append(wxIntProperty(_("FontsSize2"), wxT("FontsSize2")));
	m_htmlWinFontsSize3 = m_grid->Append(wxIntProperty(_("FontsSize3"), wxT("FontsSize3")));
	m_htmlWinFontsSize4 = m_grid->Append(wxIntProperty(_("FontsSize4"), wxT("FontsSize4")));
	m_htmlWinFontsSize5 = m_grid->Append(wxIntProperty(_("FontsSize5"), wxT("FontsSize5")));
	m_htmlWinFontsSize6 = m_grid->Append(wxIntProperty(_("FontsSize6"), wxT("FontsSize6")));

	m_grid->AppendCategory(_("Html"), wxT("Html"));
	m_htmlHead = m_grid->Append(wxStringProperty(_("HtmlHead"), wxT("HtmlHead")));
	m_htmlFoot = m_grid->Append(wxStringProperty(_("HtmlFoot"), wxT("HtmlFoot")));
	m_keywordHead = m_grid->Append(wxStringProperty(_("KeywordHead"), wxT("KeywordHead")));
	m_keywordFoot = m_grid->Append(wxStringProperty(_("KeywordFoot"), wxT("KeywordFoot")));
	m_decorationHead = m_grid->Append(wxStringProperty(_("DecorationHead"), wxT("DecorationHead")));
	m_decorationFoot = m_grid->Append(wxStringProperty(_("DecorationFoot"), wxT("DecorationFoot")));
	m_emphasisHead = m_grid->Append(wxStringProperty(_("EmphasisHead"), wxT("EmphasisHead")));
	m_emphasisFoot = m_grid->Append(wxStringProperty(_("EmphasisFoot"), wxT("EmphasisFoot")));
	m_superscriptHead = m_grid->Append(wxStringProperty(_("SuperscriptHead"), wxT("SuperscriptHead")));
	m_superscriptFoot = m_grid->Append(wxStringProperty(_("SuperscriptFoot"), wxT("SuperscriptFoot")));
	m_subscriptHead = m_grid->Append(wxStringProperty(_("SubscriptHead"), wxT("SubscriptHead")));
	m_subscriptFoot = m_grid->Append(wxStringProperty(_("SubscriptFoot"), wxT("SubscriptFoot")));
	m_newLine = m_grid->Append(wxStringProperty(_("NewLine"), wxT("NewLine")));
	m_noNewlineHead = m_grid->Append(wxStringProperty(_("NoNewlineHead"), wxT("NoNewlineHead")));
	m_noNewlineFoot = m_grid->Append(wxStringProperty(_("NoNewlineFoot"), wxT("NoNewlineFoot")));

	// 辞書
	m_dicList->InsertColumn(0, _("Alias"), wxLIST_FORMAT_LEFT, 150);
	m_dicList->InsertColumn(1, _("Path"), wxLIST_FORMAT_LEFT, 200);
	m_dicList->InsertColumn(2, _("Subbook"), wxLIST_FORMAT_LEFT, 50);
	m_dicList->InsertColumn(3, _("Appendix"), wxLIST_FORMAT_LEFT, 0);
	m_dicList->InsertColumn(4, _("Enabled"), wxLIST_FORMAT_LEFT, 0);

	// グループ
	wxTreeItemId root = m_groupTree->AddRoot(wxT("root"));
	m_groupTree->AppendItem(root, wxT("yet"));
	m_groupTree->AppendItem(root, wxT("***"));
	
	// ショートカット
	m_scList->InsertColumn(0, _("Name"));
	m_scList->InsertColumn(1, _("Icon"));
	m_scList->InsertColumn(2, _("Dictionary"));
	m_scList->InsertColumn(3, _("Search method"));
	m_scList->InsertColumn(4, _("Multi mode"));
	m_scList->InsertItem(0, wxT("yet"));
	m_scList->SetItem(0, 1, wxT("***"));
	
	// ※未完成のページは消す。
	m_note->RemovePage(3);
	m_note->RemovePage(2);
//	m_note->RemovePage(1);
}

/**
 * 設定を読み込む
 */
void DicSettingDialog::LoadConfig()
{
	DicShare::LoadConfig();
	
	// Common
	m_grid->SetPropertyValue(m_pageMaxResults, DicShare::pageMaxResults);
	m_grid->SetPropertyValue(m_pageMaxBytes, DicShare::pageMaxBytes);
	m_grid->SetPropertyValue(m_searchMaxResults, DicShare::searchMaxResults);
	
	// Html
	m_grid->SetPropertyValue(m_htmlHead, DicShare::htmlHead);
	m_grid->SetPropertyValue(m_htmlFoot, DicShare::htmlFoot);
	m_grid->SetPropertyValue(m_keywordHead, DicShare::keywordHead);
	m_grid->SetPropertyValue(m_keywordFoot, DicShare::keywordFoot);
	m_grid->SetPropertyValue(m_decorationHead, DicShare::decorationHead);
	m_grid->SetPropertyValue(m_decorationFoot, DicShare::decorationFoot);
	m_grid->SetPropertyValue(m_emphasisHead, DicShare::emphasisHead);
	m_grid->SetPropertyValue(m_emphasisFoot, DicShare::emphasisFoot);
	m_grid->SetPropertyValue(m_superscriptHead, DicShare::superscriptHead);
	m_grid->SetPropertyValue(m_superscriptFoot, DicShare::superscriptFoot);
	m_grid->SetPropertyValue(m_subscriptHead, DicShare::subscriptHead);
	m_grid->SetPropertyValue(m_subscriptFoot, DicShare::subscriptFoot);
	m_grid->SetPropertyValue(m_newLine, DicShare::newLine);
	m_grid->SetPropertyValue(m_noNewlineHead, DicShare::noNewlineHead);
	m_grid->SetPropertyValue(m_noNewlineFoot, DicShare::noNewlineFoot);

	wxConfigBase* config = wxConfigBase::Get();
	
	config->SetPath(wxT("/MainFrame"));
	m_grid->SetPropertyValue(m_mainFrameMaximize, config->Read(wxT("Maximize"), (long)0));
//	m_grid->SetPropertyValue(m_mainFrameX, config->Read(wxT("X"), (long)0));
//	m_grid->SetPropertyValue(m_mainFrameY, config->Read(wxT("Y"), (long)0));
	m_grid->SetPropertyValue(m_mainFrameWidth, config->Read(wxT("Width"), (long)0));
	m_grid->SetPropertyValue(m_mainFrameHeight, config->Read(wxT("Height"), (long)0));
	
	config->SetPath(wxT("/Toolbar"));
	m_grid->SetPropertyValue(m_toolbarSearchMethod, config->Read(wxT("SearchMethod"), (long)0));
	
	config->SetPath(wxT("/Splitter"));
    m_grid->SetPropertyValue(m_splitterSashPosition, config->Read(wxT("SashPosition"), (long)0));
    
	config->SetPath(wxT("/LeftSplitter"));
    m_grid->SetPropertyValue(m_leftSplitterSashPosition, config->Read(wxT("SashPosition"), (long)0));

	config->SetPath(wxT("/DicChoice"));
	m_grid->SetPropertyValue(m_dicChoiceSelection, config->Read(wxT("Selection"), wxT("")));

	config->SetPath(wxT("/MultiKeysSplitter"));
	m_grid->SetPropertyValue(m_multiKeysSplitterSashPosition, config->Read(wxT("SashPosition"), (long)0));

	config->SetPath(wxT("/MultiTypeChoice"));
	m_grid->SetPropertyValue(m_multiTypeChoiceSelection, config->Read(wxT("Selection"), (long)0));
	
	config->SetPath(wxT("/HitList"));
    m_grid->SetPropertyValue(m_hitListColumnWidth0, config->Read(wxT("ColumnWidth0"), (long)0));
    m_grid->SetPropertyValue(m_hitListColumnWidth1, config->Read(wxT("ColumnWidth1"), (long)0));
    
    config->SetPath(wxT("/HtmlWin/wxHtmlWindow"));
    m_grid->SetPropertyValue(m_htmlWinFontFaceFixed, config->Read(wxT("FontFaceFixed"), wxT("")));
    m_grid->SetPropertyValue(m_htmlWinFontFaceNormal, config->Read(wxT("FontFaceNormal"), wxT("")));
    m_grid->SetPropertyValue(m_htmlWinFontsSize0, config->Read(wxT("FontsSize0"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize1, config->Read(wxT("FontsSize1"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize2, config->Read(wxT("FontsSize2"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize3, config->Read(wxT("FontsSize3"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize4, config->Read(wxT("FontsSize4"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize5, config->Read(wxT("FontsSize5"), (long)0));
    m_grid->SetPropertyValue(m_htmlWinFontsSize6, config->Read(wxT("FontsSize6"), (long)0));

	// 編集用データを読み込む
	m_subbooks.LoadConfig(NULL, false);
	m_dicList->DeleteAllItems();
	for (unsigned int i = 0; i < m_subbooks.size(); ++i)
	{
		DicSubbook* subbook = m_subbooks[i];
		m_dicList->InsertItem(i, subbook->GetAlias());
		m_dicList->SetItemData(i, (long)subbook);
		ShowDicListItem(i);
/*		m_dicList->SetItem(i, 1, item->GetBookPath());
		wxString subbook = wxString::Format(wxT("%d"), item->GetSubbookCode());
		m_dicList->SetItem(i, 2, subbook);
		m_dicList->SetItem(i, 3, item->GetAppendixPath());
		m_dicList->SetItem(i, 4, item->IsEnabled() ? _("Enabled") : _("Disabled"));
*/
	}
}

/**
 * 設定を保存
 */
void DicSettingDialog::SaveConfig()
{
	// Common
	DicShare::pageMaxResults = m_grid->GetPropertyValueAsInt(m_pageMaxResults);
	DicShare::pageMaxBytes = m_grid->GetPropertyValueAsInt(m_pageMaxBytes);
	DicShare::searchMaxResults = m_grid->GetPropertyValueAsInt(m_searchMaxResults);

	// Html
	DicShare::htmlHead = m_grid->GetPropertyValueAsString(m_htmlHead);
	DicShare::htmlFoot = m_grid->GetPropertyValueAsString(m_htmlFoot);
	DicShare::keywordHead = m_grid->GetPropertyValueAsString(m_keywordHead);
	DicShare::keywordFoot = m_grid->GetPropertyValueAsString(m_keywordFoot);
	DicShare::decorationHead = m_grid->GetPropertyValueAsString(m_decorationHead);
	DicShare::decorationFoot = m_grid->GetPropertyValueAsString(m_decorationFoot);
	DicShare::emphasisHead = m_grid->GetPropertyValueAsString(m_emphasisHead);
	DicShare::emphasisFoot = m_grid->GetPropertyValueAsString(m_emphasisFoot);
	DicShare::superscriptHead = m_grid->GetPropertyValueAsString(m_superscriptHead);
	DicShare::superscriptFoot = m_grid->GetPropertyValueAsString(m_superscriptFoot);
	DicShare::subscriptHead = m_grid->GetPropertyValueAsString(m_subscriptHead);
	DicShare::subscriptFoot = m_grid->GetPropertyValueAsString(m_subscriptFoot);
	DicShare::newLine = m_grid->GetPropertyValueAsString(m_newLine);
	DicShare::noNewlineHead = m_grid->GetPropertyValueAsString(m_noNewlineHead);
	DicShare::noNewlineFoot = m_grid->GetPropertyValueAsString(m_noNewlineFoot);
	
	DicShare::SaveConfig();
	
	wxConfigBase* config = wxConfigBase::Get();

	config->SetPath(wxT("/MainFrame"));
	config->Write(wxT("Maximize"), m_grid->GetPropertyValueAsBool(m_mainFrameMaximize));
//	config->Write(wxT("X"), m_grid->GetPropertyValueAsInt(m_mainFrameX));
//	config->Write(wxT("Y"), m_grid->GetPropertyValueAsInt(m_mainFrameY));
	config->Write(wxT("Width"), m_grid->GetPropertyValueAsInt(m_mainFrameWidth));
	config->Write(wxT("Height"), m_grid->GetPropertyValueAsInt(m_mainFrameHeight));

	config->SetPath(wxT("/Toolbar"));
	config->Write(wxT("SearchMethod"), m_grid->GetPropertyValueAsInt(m_toolbarSearchMethod));
	
	config->SetPath(wxT("/Splitter"));
	config->Write(wxT("SashPosition"), m_grid->GetPropertyValueAsInt(m_splitterSashPosition));
	
	config->SetPath(wxT("/LeftSplitter"));
	config->Write(wxT("SashPosition"), m_grid->GetPropertyValueAsInt(m_leftSplitterSashPosition));
	
	config->SetPath(wxT("/DicChoice"));
	config->Write(wxT("Selection"), m_grid->GetPropertyValueAsString(m_dicChoiceSelection));
	
	config->SetPath(wxT("/MultiKeysSplitter"));
	config->Write(wxT("SashPosition"), m_grid->GetPropertyValueAsInt(m_multiKeysSplitterSashPosition));

	config->SetPath(wxT("/MultiTypeChoice"));
	config->Write(wxT("Selection"), m_grid->GetPropertyValueAsInt(m_multiTypeChoiceSelection));
	
	config->SetPath(wxT("/HitList"));
	config->Write(wxT("ColumnWidth0"), m_grid->GetPropertyValueAsInt(m_hitListColumnWidth0));
	config->Write(wxT("ColumnWidth1"), m_grid->GetPropertyValueAsInt(m_hitListColumnWidth1));
	
	config->SetPath(wxT("/HtmlWin/wxHtmlWindow"));
	config->Write(wxT("FontFaceFixed"), m_grid->GetPropertyValueAsString(m_htmlWinFontFaceFixed));
	config->Write(wxT("FontFaceNormal"), m_grid->GetPropertyValueAsString(m_htmlWinFontFaceNormal));
	config->Write(wxT("FontsSize0"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize0));
	config->Write(wxT("FontsSize1"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize1));
	config->Write(wxT("FontsSize2"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize2));
	config->Write(wxT("FontsSize3"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize3));
	config->Write(wxT("FontsSize4"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize4));
	config->Write(wxT("FontsSize5"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize5));
	config->Write(wxT("FontsSize6"), m_grid->GetPropertyValueAsInt(m_htmlWinFontsSize6));

	config->Flush();
}

/**
 * 辞書リスト要素表示
 * 
 * @param item 要素
 */
void DicSettingDialog::ShowDicListItem(long item)
{
	DicSubbook* subbook = (DicSubbook*)m_dicList->GetItemData(item);
	m_dicList->SetItemText(item, subbook->GetAlias());
	m_dicList->SetItem(item, 1, subbook->GetBookPath());
	wxString subbookCode = wxString::Format(wxT("%d"), subbook->GetSubbookCode());
	m_dicList->SetItem(item, 2, subbookCode);
	m_dicList->SetItem(item, 3, subbook->GetAppendixPath());
	m_dicList->SetItem(item, 4, subbook->IsEnabled() ? _("Enabled") : _("Disabled"));
}
